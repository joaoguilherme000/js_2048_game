{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["var $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static Status = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        const newState = this.state.map((row)=>this.move(row));\n        if (JSON.stringify(this.getState()) !== JSON.stringify(newState)) {\n            this.updateGameState(newState);\n            this.insertTiles();\n        }\n    }\n    moveRight() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        const reversedState = this.state.map((row)=>[\n                ...row\n            ].reverse());\n        const newState = reversedState.map((row)=>{\n            return this.move(row).reverse();\n        });\n        if (JSON.stringify(this.getState()) !== JSON.stringify(newState)) {\n            this.updateGameState(newState);\n            this.insertTiles();\n        }\n    }\n    moveUp() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        const rotateState = this.rotateLeft(this.getState());\n        const newState = rotateState.map((row)=>this.move(row));\n        const unRotateState = this.rotateRight(newState);\n        if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n            this.updateGameState(unRotateState);\n            this.insertTiles();\n        }\n    }\n    moveDown() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        const rotateState = this.rotateRight(this.getState());\n        const newState = rotateState.map((row)=>this.move(row));\n        const unRotateState = this.rotateLeft(newState);\n        if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n            this.updateGameState(unRotateState);\n            this.insertTiles();\n        }\n    }\n    move(row) {\n        const newRow = [];\n        let i = 0;\n        while(i < row.length){\n            const current = row[i];\n            if (current) {\n                let merged = false;\n                for(let j = i + 1; j < row.length; j++){\n                    const next = row[j];\n                    if (next === current) {\n                        newRow.push(current * 2);\n                        this.updateGameScore(current * 2);\n                        merged = true;\n                        i = j + 1;\n                        break;\n                    } else if (next) {\n                        newRow.push(current);\n                        merged = true;\n                        i = j;\n                        break;\n                    }\n                }\n                if (!merged) {\n                    newRow.push(current);\n                    i++;\n                }\n            } else i++;\n        }\n        return [\n            ...newRow,\n            ...Array(row.length - newRow.length).fill(0)\n        ];\n    }\n    rotateRight(matrix) {\n        const n = matrix.length;\n        const rotatedMatrix = [];\n        for(let i = 0; i < n; i++){\n            rotatedMatrix.push([]);\n            for(let j = 0; j < n; j++)rotatedMatrix[i].unshift(matrix[j][i]);\n        }\n        return rotatedMatrix;\n    }\n    rotateLeft(matrix) {\n        const n = matrix.length;\n        const rotatedMatrix = [];\n        for(let i = 0; i < n; i++){\n            rotatedMatrix.unshift([]);\n            for(let j = 0; j < n; j++)rotatedMatrix[0].push(matrix[j][i]);\n        }\n        return rotatedMatrix;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.Status.playing;\n        this.insertTiles(2);\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.resetState();\n    }\n    findEmptyCells() {\n        return this.state.reduce((acc, row, rowIndex)=>{\n            row.forEach((cell, colIndex)=>{\n                if (cell === 0) acc.push([\n                    rowIndex,\n                    colIndex\n                ]);\n            });\n            return acc;\n        }, []);\n    }\n    generateTiles() {\n        const emptyCells = this.findEmptyCells();\n        if (!emptyCells.length) return;\n        const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    insertTiles(count = 1) {\n        for(let i = 0; i < count; i++)this.generateTiles();\n        this.updateGameStatus();\n    }\n    updateGameStatus() {\n        const state = this.getState();\n        if (this.isVictory(state)) this.status = $a5fd07fa01589658$var$Game.Status.win;\n        else if (!this.isStateValid(state)) this.status = $a5fd07fa01589658$var$Game.Status.lose;\n    }\n    resetState() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    isStateValid(currentState) {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return false;\n        for(let row = 0; row < currentState.length; row++)for(let col = 0; col < currentState[row].length; col++){\n            if (col < currentState[row].length - 1 && currentState[row][col] === currentState[row][col + 1]) return true;\n            if (row < currentState.length - 1 && currentState[row][col] === currentState[row + 1][col]) return true;\n            if (!currentState[row][col]) return true;\n        }\n        return false;\n    }\n    updateGameState(state) {\n        this.state = state;\n    }\n    updateGameScore(scoreToAdd) {\n        this.score += scoreToAdd;\n    }\n    isVictory(state) {\n        return state.flat().some((tile)=>tile === 2048);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$container = document.querySelector(\".container\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$button = $09e991522ca7e64e$var$container.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameScore = $09e991522ca7e64e$var$container.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$fieldCells = [\n    ...$09e991522ca7e64e$var$gameField.querySelectorAll(\".field-row\")\n].map((row)=>[\n        ...row.children\n    ]);\nconst $09e991522ca7e64e$var$messages = {\n    idle: $09e991522ca7e64e$var$container.querySelector(\".message-start\"),\n    lose: $09e991522ca7e64e$var$container.querySelector(\".message-lose\"),\n    win: $09e991522ca7e64e$var$container.querySelector(\".message-win\")\n};\nfunction $09e991522ca7e64e$var$fillGameField(state) {\n    state.forEach((row, i)=>{\n        row.forEach((cell, j)=>{\n            const cellElement = $09e991522ca7e64e$var$fieldCells[i][j];\n            cellElement.className = cell ? `field-cell field-cell--${cell}` : \"field-cell\";\n            cellElement.textContent = cell || \"\";\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$showMessage() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    Object.keys($09e991522ca7e64e$var$messages).forEach((key)=>{\n        const messageElement = $09e991522ca7e64e$var$messages[key];\n        if (messageElement) messageElement.classList.toggle(\"hidden\", key !== gameStatus);\n    });\n}\nfunction $09e991522ca7e64e$var$updateScore(score) {\n    $09e991522ca7e64e$var$gameScore.textContent = score;\n}\nfunction $09e991522ca7e64e$var$handleGameAction() {\n    const isStart = $09e991522ca7e64e$var$button.textContent === \"Start\";\n    if (isStart) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.replace(\"start\", \"restart\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateScore(0);\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.replace(\"restart\", \"start\");\n    }\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$fillGameField(state);\n    $09e991522ca7e64e$var$showMessage();\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$handleGameAction);\ndocument.addEventListener(\"keydown\", (e)=>{\n    e.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const moveActions = {\n        ArrowUp: $09e991522ca7e64e$var$game.moveUp,\n        ArrowDown: $09e991522ca7e64e$var$game.moveDown,\n        ArrowLeft: $09e991522ca7e64e$var$game.moveLeft,\n        ArrowRight: $09e991522ca7e64e$var$game.moveRight\n    };\n    const action = moveActions[e.key];\n    if (action) {\n        action.call($09e991522ca7e64e$var$game);\n        $09e991522ca7e64e$var$fillGameField($09e991522ca7e64e$var$game.getState());\n        $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n        $09e991522ca7e64e$var$showMessage();\n    }\n});\n\n\n//# sourceMappingURL=index.4bc47fd0.js.map\n","const Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst container = document.querySelector('.container');\nconst gameField = document.querySelector('.game-field');\nconst button = container.querySelector('.button');\nconst gameScore = container.querySelector('.game-score');\n\nconst fieldCells = [...gameField.querySelectorAll('.field-row')].map((row) => [\n  ...row.children,\n]);\n\nconst messages = {\n  idle: container.querySelector('.message-start'),\n  lose: container.querySelector('.message-lose'),\n  win: container.querySelector('.message-win'),\n};\n\nfunction fillGameField(state) {\n  state.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      const cellElement = fieldCells[i][j];\n\n      cellElement.className = cell\n        ? `field-cell field-cell--${cell}`\n        : 'field-cell';\n      cellElement.textContent = cell || '';\n    });\n  });\n}\n\nfunction showMessage() {\n  const gameStatus = game.getStatus();\n\n  Object.keys(messages).forEach((key) => {\n    const messageElement = messages[key];\n\n    if (messageElement) {\n      messageElement.classList.toggle('hidden', key !== gameStatus);\n    }\n  });\n}\n\nfunction updateScore(score) {\n  gameScore.textContent = score;\n}\n\nfunction handleGameAction() {\n  const isStart = button.textContent === 'Start';\n\n  if (isStart) {\n    game.start();\n    button.textContent = 'Restart';\n    button.classList.replace('start', 'restart');\n  } else {\n    game.restart();\n    updateScore(0);\n    button.textContent = 'Start';\n    button.classList.replace('restart', 'start');\n  }\n\n  const state = game.getState();\n\n  fillGameField(state);\n  showMessage();\n}\n\nbutton.addEventListener('click', handleGameAction);\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const moveActions = {\n    ArrowUp: game.moveUp,\n    ArrowDown: game.moveDown,\n    ArrowLeft: game.moveLeft,\n    ArrowRight: game.moveRight,\n  };\n\n  const action = moveActions[e.key];\n\n  if (action) {\n    action.call(game);\n    fillGameField(game.getState());\n    updateScore(game.getScore());\n    showMessage();\n  }\n});\n","'use strict';\n\nclass Game {\n  static Status = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = Game.Status.idle;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== Game.Status.playing) {\n      return;\n    }\n\n    const newState = this.state.map((row) => this.move(row));\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(newState)) {\n      this.updateGameState(newState);\n      this.insertTiles();\n    }\n  }\n\n  moveRight() {\n    if (this.getStatus() !== Game.Status.playing) {\n      return;\n    }\n\n    const reversedState = this.state.map((row) => [...row].reverse());\n\n    const newState = reversedState.map((row) => {\n      return this.move(row).reverse();\n    });\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(newState)) {\n      this.updateGameState(newState);\n      this.insertTiles();\n    }\n  }\n\n  moveUp() {\n    if (this.getStatus() !== Game.Status.playing) {\n      return;\n    }\n\n    const rotateState = this.rotateLeft(this.getState());\n\n    const newState = rotateState.map((row) => this.move(row));\n\n    const unRotateState = this.rotateRight(newState);\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n      this.updateGameState(unRotateState);\n      this.insertTiles();\n    }\n  }\n\n  moveDown() {\n    if (this.getStatus() !== Game.Status.playing) {\n      return;\n    }\n\n    const rotateState = this.rotateRight(this.getState());\n\n    const newState = rotateState.map((row) => this.move(row));\n\n    const unRotateState = this.rotateLeft(newState);\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n      this.updateGameState(unRotateState);\n      this.insertTiles();\n    }\n  }\n\n  move(row) {\n    const newRow = [];\n    let i = 0;\n\n    while (i < row.length) {\n      const current = row[i];\n\n      if (current) {\n        let merged = false;\n\n        for (let j = i + 1; j < row.length; j++) {\n          const next = row[j];\n\n          if (next === current) {\n            newRow.push(current * 2);\n            this.updateGameScore(current * 2);\n            merged = true;\n            i = j + 1;\n            break;\n          } else if (next) {\n            newRow.push(current);\n            merged = true;\n            i = j;\n            break;\n          }\n        }\n\n        if (!merged) {\n          newRow.push(current);\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n\n    return [...newRow, ...Array(row.length - newRow.length).fill(0)];\n  }\n\n  rotateRight(matrix) {\n    const n = matrix.length;\n    const rotatedMatrix = [];\n\n    for (let i = 0; i < n; i++) {\n      rotatedMatrix.push([]);\n\n      for (let j = 0; j < n; j++) {\n        rotatedMatrix[i].unshift(matrix[j][i]);\n      }\n    }\n\n    return rotatedMatrix;\n  }\n\n  rotateLeft(matrix) {\n    const n = matrix.length;\n    const rotatedMatrix = [];\n\n    for (let i = 0; i < n; i++) {\n      rotatedMatrix.unshift([]);\n\n      for (let j = 0; j < n; j++) {\n        rotatedMatrix[0].push(matrix[j][i]);\n      }\n    }\n\n    return rotatedMatrix;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.Status.playing;\n    this.insertTiles(2);\n  }\n\n  restart() {\n    this.status = Game.Status.idle;\n    this.resetState();\n  }\n\n  findEmptyCells() {\n    return this.state.reduce((acc, row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          acc.push([rowIndex, colIndex]);\n        }\n      });\n\n      return acc;\n    }, []);\n  }\n\n  generateTiles() {\n    const emptyCells = this.findEmptyCells();\n\n    if (!emptyCells.length) {\n      return;\n    }\n\n    const [row, col] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  insertTiles(count = 1) {\n    for (let i = 0; i < count; i++) {\n      this.generateTiles();\n    }\n\n    this.updateGameStatus();\n  }\n\n  updateGameStatus() {\n    const state = this.getState();\n\n    if (this.isVictory(state)) {\n      this.status = Game.Status.win;\n    } else if (!this.isStateValid(state)) {\n      this.status = Game.Status.lose;\n    }\n  }\n\n  resetState() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  isStateValid(currentState) {\n    if (this.status !== Game.Status.playing) {\n      return false;\n    }\n\n    for (let row = 0; row < currentState.length; row++) {\n      for (let col = 0; col < currentState[row].length; col++) {\n        if (\n          col < currentState[row].length - 1 &&\n          currentState[row][col] === currentState[row][col + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          row < currentState.length - 1 &&\n          currentState[row][col] === currentState[row + 1][col]\n        ) {\n          return true;\n        }\n\n        if (!currentState[row][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  updateGameState(state) {\n    this.state = state;\n  }\n\n  updateGameScore(scoreToAdd) {\n    this.score += scoreToAdd;\n  }\n\n  isVictory(state) {\n    return state.flat().some((tile) => tile === 2048);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","Status","idle","playing","win","lose","constructor","initialState","state","map","row","status","score","moveLeft","getStatus","newState","move","JSON","stringify","getState","updateGameState","insertTiles","moveRight","reversedState","reverse","moveUp","rotateState","rotateLeft","unRotateState","rotateRight","moveDown","newRow","i","length","current","merged","j","next","push","updateGameScore","Array","fill","matrix","n","rotatedMatrix","unshift","getScore","start","restart","resetState","findEmptyCells","reduce","acc","rowIndex","forEach","cell","colIndex","generateTiles","emptyCells","col","Math","floor","random","count","updateGameStatus","isVictory","isStateValid","currentState","scoreToAdd","flat","some","tile","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$container","document","querySelector","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$fieldCells","querySelectorAll","children","$09e991522ca7e64e$var$messages","$09e991522ca7e64e$var$fillGameField","cellElement","className","textContent","$09e991522ca7e64e$var$showMessage","gameStatus","Object","keys","key","messageElement","classList","toggle","$09e991522ca7e64e$var$updateScore","addEventListener","replace","e","preventDefault","action","moveActions","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","call"],"version":3,"file":"index.4bc47fd0.js.map"}